#!/usr/bin/env zsh
# vim: ft=zsh

# Config
local LOCAL_DOTFILES_DIR="$HOME/.local-dotfiles"
local DOTFILES_DIR="$HOME/dotfiles"
local VERSION_CONTROLLED_HOOKS_DIR=".githooks"

# Shut Homebrew up a bit
export HOMEBREW_NO_ENV_HINTS=1
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_AUTO_UPDATE=1

# Install bun early if not already installed
if ! command -v bun &>/dev/null; then
	brew install oven-sh/bun/bun 2>/dev/null
fi

# Handle brew taps
brew tap FelixKratz/formulae

# Next steps run in parallel

# Brew install (bulk)
{
	brew install --quiet \
		tlrc \
		bat \
		btop \
		ack \
		go \
		gpg \
		zinit \
		lua \
		1password-cli \
		lua-language-server \
		pkgx \
		yazi \
		oven-sh/bun/bun \
		knqyf263/pet/pet \
		lazygit \
		bottom \
		borders \
		rustup \
		rust-analyzer \
		gum \
		stow \
		jq \
		gh \
		hub \
		tmux \
		sesh \
		zoxide \
		httpie \
		eza \
		gleam \
		erlang \
		fx \
		fzf \
		fd \
		rg \
		neovim \
		libyaml
} &

# Upgrade and install Bun packages (bulk)
{
	bun upgrade > /dev/null 2>&1
	bun i -g --no-summary \
		typescript@latest \
		typescript-language-server@latest \
		svelte-language-server@latest \
		prettier@latest \
		prettier-plugin-svelte@latest \
		@tailwindcss/language-server@latest \
		vscode-langservers-extracted@latest \
		@astrojs/language-server \
		bash-language-server
} &

# Wait for the above parallel installs to finish
wait

# Now handle manual installs

# Configure tmux plugin directory
mkdir -p ~/.local/bin/tmux/plugins

# Install tmux tpm
git clone https://github.com/tmux-plugins/tpm ~/.local/bin/tmux/plugins/tpm 2>/dev/null

# phpactor
if ! command -v phpactor &>/dev/null; then
	echo "Prompting for password to install phpactor to /usr/local/bin..."
  sudo curl -sLo /usr/local/bin/phpactor https://github.com/phpactor/phpactor/releases/latest/download/phpactor.phar
  sudo chmod +x /usr/local/bin/phpactor
fi

# Merge files from the local dotfiles directory
for default_file in "$DOTFILES_DIR"/**/*.default.*(ND.); do
	relative_path=${default_file#$DOTFILES_DIR/}
	dir_part=${relative_path:h}
	filename=${relative_path:t}

		# print "Processing Default File: $default_file"

		if [[ $filename =~ '^(.*)\.default\.(.*)$' ]]; then
			local base_name=$match[1]
			local extension=$match[2]
			local target_filename="${base_name}.${extension}"
			local target_dir
			local target_file
			local local_check_dir # Directory where the corresponding local file should be

			if [[ "$dir_part" == "." ]]; then
				# File is in the root of DOTFILES_DIR
				target_dir="$HOME"
				local_check_dir="$LOCAL_DOTFILES_DIR"
			else
				# File is in a subdirectory
				target_dir="$HOME/$dir_part"
				local_check_dir="$LOCAL_DOTFILES_DIR/$dir_part"
			fi
			target_file="$target_dir/$target_filename"

				# print "  Base Name: $base_name"
				# print "  Extension: $extension"
				# print "  Target File: $target_file"

				# Check for corresponding .prepend.* or .append.* file in LOCAL_DOTFILES_DIR
				local local_file=""
				local local_type="" # Will be 'prepend' or 'append'

				# Only check if the potential local directory exists
				if [[ -d "$local_check_dir" ]]; then
					local potential_local_prepend="$local_check_dir/$base_name.prepend.$extension"
					local potential_local_append="$local_check_dir/$base_name.append.$extension"

					if [[ -f "$potential_local_prepend" ]]; then
						local_file="$potential_local_prepend"
						local_type="prepend"
						# print "  Found Local File: $local_file (type: $local_type)"
					elif [[ -f "$potential_local_append" ]]; then
						local_file="$potential_local_append"
						local_type="append"
						# print "  Found Local File: $local_file (type: $local_type)"
					else
						# print "  No corresponding .prepend or .append file found in $local_check_dir"
					fi
				else
					# This is expected if LOCAL_DOTFILES_DIR doesn't exist or doesn't mirror structure
					print "  Local check directory does not exist or not checked: $local_check_dir"
					print "  No corresponding local file found."
				fi

				# Ensure the target directory exists
				mkdir -p "$target_dir"
				if [[ $? -ne 0 ]]; then
					print -u2 "Error: Failed to create target directory: $target_dir for $default_file"
					continue # Skip to next file
				fi

				# Combine files based on whether a local file was found and its type
				if [[ -z "$local_file" ]]; then
					# print "  Action: Writing default file content only to target."
					cat "$default_file" > "$target_file"
				elif [[ "$local_type" == "prepend" ]]; then
					# print "  Action: Combining: Local (prepend) + Default"
					cat "$local_file" "$default_file" > "$target_file"
				elif [[ "$local_type" == "append" ]]; then
					# print "  Action: Combining: Default + Local (append)"
					cat "$default_file" "$local_file" > "$target_file"
				fi

				if [[ $? -ne 0 ]]; then
					print -u2 "Error: Failed to write target file: $target_file"
				fi
			else
				print -u2 "Warning: Could not parse filename format (expected *.default.*): $filename in $default_file"
		fi
	done

# Sesh config concatenation
cp ~/dotfiles/.config/sesh/sesh-default.toml ~/.config/sesh/sesh.toml 2>/dev/null

if [ -f $LOCAL_DOTFILES_DIR/.config/sesh/sesh.toml ]; then
	cat $LOCAL_DOTFILES_DIR/.config/sesh/sesh.toml >> ~/.config/sesh/sesh.toml
fi

# Set up git hooks
current_hooks_path=$(git -C "$DOTFILES_DIR" config --get core.hooksPath 2>/dev/null)
get_config_exit_code=$?

if [ $get_config_exit_code -ne 0 ] || [ "$current_hooks_path" != "$VERSION_CONTROLLED_HOOKS_DIR" ]; then
  echo "Setting core.hooksPath for $DOTFILES_DIR..."
  if git -C "$DOTFILES_DIR" config core.hooksPath "$VERSION_CONTROLLED_HOOKS_DIR"; then
    echo "Git hooks for $DOTFILES_DIR are now managed from the '$VERSION_CONTROLLED_HOOKS_DIR' directory."
  else
    echo "Error: Failed to set core.hooksPath for $DOTFILES_DIR." >&2
    return 1 # Or exit 1 if not in a function
  fi
fi

HOOK_FILE_PATH="$DOTFILES_DIR/$VERSION_CONTROLLED_HOOKS_DIR/pre-push"
if [ -f "$HOOK_FILE_PATH" ]; then
    if ! chmod +x "$HOOK_FILE_PATH"; then
       echo "Warning: Could not make hook executable: $HOOK_FILE_PATH" >&2
    fi
fi

# Lazygit config
# This symlinks the default location for macOS to the XDG_CONFIG_HOME location
# for use of Lazygit from within Neovim, which does not load my zsh configs
mkdir -p ~/Library/Application\ Support/lazygit
unlink ~/Library/Application\ Support/lazygit/config.yml 2>/dev/null
ln -s ~/.config/lazygit/config.yml ~/Library/Application\ Support/lazygit/config.yml 2>/dev/null

# Ensure that the local dotfiles pet dir exists
mkdir -p $LOCAL_DOTFILES_DIR/.config/pet

# Local env
mkdir -p ~/.local/bin
touch ~/.local/bin/env

# Rust
if ! command -v cargo &>/dev/null; then
	echo "1" | rustup-init
	rustup install stable
  rustup default stable > /dev/null 2>&1
fi

# Fonts
# Require aliases to be loaded
source $DOTFILES_DIR/.zsh/100-aliases.zsh
decrypt_and_install_fonts

echo "\033[32mâœ”\033[0m  Done!"
